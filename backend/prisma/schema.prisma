generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String     @unique
  university      String?
  emailVerifiedAt DateTime?
  passwordHash    String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  degree          String?
  major           String?
  yearOfStudy     String?
  schedules       Schedule[]
  sessions        Session[]
  uploads         Upload[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Schedule {
  id         String   @id @default(cuid())
  userId     String
  term       Term
  courseCode String
  section    String?
  type       String?
  days       String
  startTime  String
  duration   Int?
  room       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id        String   @id @default(cuid())
  userId    String
  term      Term
  filename  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id        String    @id @default(cuid())
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  credits   String
  faculty   String
  name      String
  number    String
  subject   String
  sections  Section[]
}

model Section {
  id         String     @id @default(cuid())
  courseId   String
  term       String
  instructor String?
  letter     String
  offerings  Offering[]
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Offering {
  id        String    @id @default(cuid())
  sectionId String
  type      String
  number    String?
  notes     String?
  meetings  Meeting[]
  section   Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Meeting {
  id         String   @id @default(cuid())
  day        String?
  startTime  String?
  duration   Int?
  campus     String?
  offeringId String
  room       String?
  offering   Offering @relation(fields: [offeringId], references: [id], onDelete: Cascade)
}

enum Term {
  F
  W
  S
  Y
  LB
  WL
}
